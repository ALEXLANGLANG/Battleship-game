/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.xs75.battleship;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import java.io.EOFException;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.parallel.ResourceAccessMode;
import org.junit.jupiter.api.parallel.ResourceLock;
import org.junit.jupiter.api.parallel.Resources;
import java.io.StringReader;
import java.io.BufferedReader;
import java.io.InputStreamReader;
class AppTest {
  /**
   * This is the deterministic App.main with randomseed = 20
*/
  private void deterAppMain()throws IOException{
    Board<Character> b1 = new BattleShipBoard<Character>('X', 10, 20);
    Board<Character> b2 = new BattleShipBoard<Character>('X', 10, 20);
    BufferedReader input = new BufferedReader(new InputStreamReader(System.in));
    V1V2ShipFactory factory = new V1V2ShipFactory();
    Player p1 = App.createOnePlayer("A", b1, input, System.out, factory,true);
    Player p2 = App.createOnePlayer("B", b2, input, System.out, factory,true);
    App app = new App(p1, p2);
    app.doPlacementPhase();
    app.doAttackingPhase();
  }
  /***
   * This helps to test main function
   * @param inFIle is the input file
   * @param outFile is the expected file
   * @param deter is deterministic
*/  
  private void test_main_helper(String inFile, String outFile, boolean deter) throws IOException{
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    PrintStream out = new PrintStream(bytes, true);
    InputStream input = getClass().getClassLoader().getResourceAsStream(inFile);
    assertNotNull(input);
    InputStream expectedStream = getClass().getClassLoader().getResourceAsStream(outFile);
    assertNotNull(expectedStream);
    InputStream oldIn = System.in;
    PrintStream oldOut = System.out;
    try {
      System.setIn(input);
      System.setOut(out);
      if(!deter){
        App.main(new String[0]);}
      else{
        deterAppMain();}
    } finally {
      System.setIn(oldIn);
      System.setOut(oldOut);
    }
    String expected = new String(expectedStream.readAllBytes());
    String actual = bytes.toString();
    if(deter){
      assertEquals(expected, actual);}
    
  }
  //  @Disabled
  @Test
  @ResourceLock(value = Resources.SYSTEM_OUT, mode = ResourceAccessMode.READ_WRITE)
  void test_main() throws IOException {
    test_main_helper("input.txt", "output.txt",true);
    test_main_helper("input2.txt", "output2.txt",true);
    test_main_helper("intAIvsAI.txt", "outAIvsAI.txt",true);
    test_main_helper("intAIvsHuman.txt", "outAIvsHuman.txt",true);
    test_main_helper("intPvsP.txt", "outPvsP.txt",false);
    test_main_helper("intAIvsAI2.txt", "outAIvsAI2.txt",false);
  }

  @Test
  public void test_createOnePlayer(){
    Board<Character> b1 = new BattleShipBoard<Character>('X', 10, 20);    
    BufferedReader input = new BufferedReader(new StringReader(""));
    V1V2ShipFactory factory = new V1V2ShipFactory();
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    PrintStream ps = new PrintStream(bytes, true);

    assertThrows(EOFException.class, () ->  App.createOnePlayer("A", b1, input,ps , factory,false));
  }
}
